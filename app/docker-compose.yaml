version: '3.5'

services:
  net_ingress:
    image: traefik:v2.4.13
    container_name: net_ingress
    hostname: net_ingress
    restart: always
    command:
      # - --log.level=DEBUG
      - --api
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.mqtt.address=:8883
      - --certificatesresolvers.myresolver.acme.dnschallenge=true
      - --certificatesresolvers.myresolver.acme.dnschallenge.provider=digitalocean
      # - --certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesresolvers.myresolver.acme.email=${TRAEFIK_LETSENCRYPT_EMAIL}
      - --certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --metrics.prometheus=true
      - --metrics.prometheus.entryPoint=web
    environment:
      - DO_AUTH_TOKEN
    extra_hosts:
      - host.docker.internal:10.0.0.1
    labels:
      - traefik.enable=true
      - traefik.http.routers.traefik.rule=Host(`traefik.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.traefik.tls=true
      - traefik.http.routers.traefik.tls.certresolver=myresolver
      - traefik.http.routers.traefik.service=api@internal
      - traefik.http.services.traefik.loadbalancer.server.port=8080
    ports:
      - 80:80
      - 443:443
      - 8883:8883
    volumes:
      - ./data/traefik:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock

  mon_grafana:
    image: grafana/grafana:8.2.2
    container_name: mon_grafana
    hostname: mon_grafana
    depends_on:
      - db_influxdb
      - db_loki
    restart: always
    user: "1000"
    environment:
      - INFLUXDB_GRAFANA_TOKEN
      - GF_DASHBOARDS_DEFAULT_HOME_DASHBOARD_PATH=/var/lib/grafana/dashboards/monitoring/alerting.json
      - GF_SERVER_DOMAIN=grafana.${TRAEFIK_DOMAIN}
      - GF_SERVER_ROOT_URL=%(protocol)s://%(domain)s/
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.grafana.rule=Host(`grafana.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.grafana.tls=true
      - traefik.http.routers.grafana.tls.certresolver=myresolver
      - traefik.http.services.grafana.loadbalancer.server.port=3000
    volumes:
      - ./data/grafana:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards

  mon_promtail:
    image: grafana/promtail:2.2.1
    container_name: mon_promtail
    hostname: mon_promtail
    restart: always
    volumes:
      - ./config/promtail/promtail.yaml:/etc/promtail/config.yml
      - ./data/promtail:/data
      - /var/log:/var/log
    command: -config.file=/etc/promtail/config.yml

  db_loki:
    image: grafana/loki:2.3.0
    container_name: db_loki
    hostname: db_loki
    restart: always
    user: "1000"
    command: -config.file=/etc/loki/local-config.yaml
    labels:
      - traefik.enable=true
      - traefik.http.routers.loki.rule=Host(`loki.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.loki.tls=true
      - traefik.http.routers.loki.tls.certresolver=myresolver
      - traefik.http.services.loki.loadbalancer.server.port=3100
    volumes:
      - ./config/loki/loki-config.yaml:/etc/loki/local-config.yaml
      - ./data/loki:/loki

  db_influxdb:
    image: influxdb:2.0.9
    container_name: db_influxdb
    hostname: db_influxdb
    restart: always
    environment:
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_ADMIN_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=home
      - DOCKER_INFLUXDB_INIT_BUCKET=monitoring
      - INFLUXDB_HTTP_LOG_ENABLED=false
      - INFLUXDB_REPORTING_DISABLED=true
    labels:
      - traefik.enable=true
      - traefik.http.routers.influxdb.rule=Host(`influxdb.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.influxdb.tls=true
      - traefik.http.routers.influxdb.tls.certresolver=myresolver
      - traefik.http.services.influxdb.loadbalancer.server.port=8086
    volumes:
      - ./data/influxdb2:/var/lib/influxdb2

  net_pihole:
    image: pihole/pihole:2021.10.1
    container_name: net_pihole
    hostname: net_pihole
    restart: always
    depends_on:
      - net_unbound
    ports:
      - 53:53/tcp
      - 53:53/udp
    environment:
      - TZ=${TZ}
      - PIHOLE_DNS_=10.0.0.2#5053
      - WEBPASSWORD=${PI_HOLE_PASSWORD}
    labels:
      - traefik.enable=true
      - traefik.http.routers.pihole.rule=Host(`pihole.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.pihole.tls=true
      - traefik.http.routers.pihole.tls.certresolver=myresolver
      - traefik.http.services.pihole.loadbalancer.server.port=80
    volumes:
      - ./data/pihole/config/etc-pihole/:/etc/pihole/
      - ./data/pihole/config/etc-dnsmasq.d/:/etc/dnsmasq.d/

  net_unbound:
    image: klutchell/unbound:1.13.2
    container_name: net_unbound
    hostname: net_unbound
    restart: always
    networks:
      default:
        ipv4_address: 10.0.0.2

  pri_cups:
    build:
      context: src/cups
    container_name: pri_cups
    hostname: pri_cups
    restart: always
    privileged: true
    device_cgroup_rules:
      - 'c 180:* rmw'
    volumes:
      - /dev:/dev
      - /run/udev:/run/udev:ro
      - ./config/cups/printers.conf:/etc/cups/printers.conf
    labels:
      - traefik.enable=true
      - traefik.http.routers.cups.rule=Host(`cups.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.cups.tls=true
      - traefik.http.routers.cups.tls.certresolver=myresolver
      - traefik.http.services.cups.loadbalancer.server.port=631

  iot_mosquitto:
    image: eclipse-mosquitto:1.6.15
    container_name: iot_mosquitto
    hostname: iot_mosquitto
    restart: always
    entrypoint: /entrypoint.sh
    environment:
      - MOSQUITTO_USERNAME=${MOSQUITTO_USERNAME}
      - MOSQUITTO_PASSWORD=${MOSQUITTO_PASSWORD}
    volumes:
      - ./data/mosquitto:/mosquitto/data
      - ./src/mosquitto/entrypoint.sh:/entrypoint.sh
      - ./config/mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    labels:
      - traefik.enable=true
      - traefik.tcp.routers.mqtt.rule=HostSNI(`mqtt.${TRAEFIK_DOMAIN}`)
      - traefik.tcp.routers.mqtt.entrypoints=mqtt
      - traefik.tcp.routers.mqtt.tls=true
      - traefik.tcp.routers.mqtt.service=mqtt
      - traefik.tcp.services.mqtt.loadBalancer.server.port=1883

  iot_nodered:
    image: nodered/node-red:2.1.3
    container_name: iot_nodered
    hostname: iot_nodered
    restart: always
    depends_on:
      - iot_mosquitto
      - iot_zigbee2mqtt
    environment:
      - TZ=${TZ}
      - NODERED_CREDENTIALS_SECRET=${NODERED_CREDENTIALS_SECRET}
    labels:
      - traefik.enable=true
      - traefik.http.routers.nodered.rule=Host(`nodered.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.nodered.tls=true
      - traefik.http.routers.nodered.tls.certresolver=myresolver
      - traefik.http.services.nodered.loadbalancer.server.port=1880
    volumes:
      - ./data/nodered:/data

  # iot_zigbee2mqtt2:
  #   image: koenkk/zigbee2mqtt:1.21.1
  #   container_name: iot_zigbee2mqtt2
  #   hostname: iot_zigbee2mqtt2
  #   restart: always
  #   depends_on:
  #     - iot_mosquitto
  #   devices:
  #     - /dev/ttyACM0
  #   environment:
  #     - TZ=${TZ}
  #     - ZIGBEE2MQTT_CONFIG_FRONTEND_PORT=8080
  #     - ZIGBEE2MQTT_CONFIG_HOMEASSISTANT=false
  #     - ZIGBEE2MQTT_CONFIG_PERMIT_JOIN=false
  #     - ZIGBEE2MQTT_CONFIG_MQTT_SERVER=mqtts://mqtt.${TRAEFIK_DOMAIN}
  #     - ZIGBEE2MQTT_CONFIG_MQTT_USER=${MOSQUITTO_USERNAME}
  #     - ZIGBEE2MQTT_CONFIG_MQTT_PASSWORD=${MOSQUITTO_PASSWORD}
  #     - ZIGBEE2MQTT_CONFIG_MQTT_BASE_TOPIC=zigbee2mqtt2
  #     - ZIGBEE2MQTT_CONFIG_MQTT_INCLUDE_DEVICE_INFORMATION=true
  #     - ZIGBEE2MQTT_CONFIG_SERIAL_PORT=/dev/ttyACM0
  #     - ZIGBEE2MQTT_CONFIG_SERIAL_DISABLE_LED=true
  #     - ZIGBEE2MQTT_CONFIG_SERIAL_ADAPTER=zstack
  #     - ZIGBEE2MQTT_CONFIG_ADVANCED_LOG_LEVEL=warn
  #     - ZIGBEE2MQTT_CONFIG_ADVANCED_LOG_OUTPUT_0=console
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.zigbee2mqtt2.rule=Host(`zigbee2.${TRAEFIK_DOMAIN}`)
  #     - traefik.http.routers.zigbee2mqtt2.tls=true
  #     - traefik.http.routers.zigbee2mqtt2.tls.certresolver=myresolver
  #     - traefik.http.services.zigbee2mqtt2.loadbalancer.server.port=8080
  #   volumes:
  #     - ./data/zigbee2mqtt2:/app/data

  iot_zigbee2mqtt:
    image: koenkk/zigbee2mqtt:1.21.2
    container_name: iot_zigbee2mqtt
    hostname: iot_zigbee2mqtt
    restart: always
    depends_on:
      - iot_mosquitto
    devices:
      - ${ZIGBEE_DEVICE}
    environment:
      - TZ=${TZ}
      - ZIGBEE2MQTT_CONFIG_FRONTEND_PORT=8080
      - ZIGBEE2MQTT_CONFIG_HOMEASSISTANT=false
      - ZIGBEE2MQTT_CONFIG_PERMIT_JOIN=false
      - ZIGBEE2MQTT_CONFIG_MQTT_SERVER=mqtts://mqtt.${TRAEFIK_DOMAIN}
      - ZIGBEE2MQTT_CONFIG_MQTT_USER=${MOSQUITTO_USERNAME}
      - ZIGBEE2MQTT_CONFIG_MQTT_PASSWORD=${MOSQUITTO_PASSWORD}
      - ZIGBEE2MQTT_CONFIG_MQTT_BASE_TOPIC=zigbee2mqtt
      - ZIGBEE2MQTT_CONFIG_MQTT_INCLUDE_DEVICE_INFORMATION=true
      - ZIGBEE2MQTT_CONFIG_SERIAL_PORT=${ZIGBEE_DEVICE}
      - ZIGBEE2MQTT_CONFIG_SERIAL_DISABLE_LED=${ZIGBEE_DISABLE_LED}
      - ZIGBEE2MQTT_CONFIG_SERIAL_ADAPTER=${ZIGBEE_ADAPTER}
      - ZIGBEE2MQTT_CONFIG_ADVANCED_LOG_LEVEL=warn
      - ZIGBEE2MQTT_CONFIG_ADVANCED_LOG_OUTPUT_0=console
    labels:
      - traefik.enable=true
      - traefik.http.routers.zigbee2mqtt.rule=Host(`zigbee.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.zigbee2mqtt.tls=true
      - traefik.http.routers.zigbee2mqtt.tls.certresolver=myresolver
      - traefik.http.services.zigbee2mqtt.loadbalancer.server.port=8080
    volumes:
      - ./data/zigbee2mqtt:/app/data

  fil_nextcloud:
    image: nextcloud:22.2.0-apache
    container_name: fil_nextcloud
    depends_on:
      - db_postgres_nextcloud
    environment:
      - POSTGRES_DB=nextcloud
      - POSTGRES_HOST=db_postgres_nextcloud
      - POSTGRES_USER=nextcloud
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD
      - NEXTCLOUD_ADMIN_USER=admin
      - NEXTCLOUD_ADMIN_PASSWORD=$NEXTCLOUD_ADMIN_PASSWORD
      - NEXTCLOUD_TRUSTED_DOMAINS=nextcloud.${TRAEFIK_DOMAIN}
      - TRUSTED_PROXIES=nextcloud.${TRAEFIK_DOMAIN}
      - OVERWRITEPROTOCOL=https
    volumes:
      - ./data/nextcloud:/var/www/html
    labels:
      - traefik.enable=true
      - traefik.http.routers.nextcloud.rule=Host(`nextcloud.${TRAEFIK_DOMAIN}`)
      - traefik.http.routers.nextcloud.tls=true
      - traefik.http.routers.nextcloud.tls.certresolver=myresolver
      - traefik.http.services.nextcloud.loadbalancer.server.port=80
      - traefik.http.routers.nextcloud.middlewares=nextcloud,nextcloud_redirect
      - traefik.http.middlewares.nextcloud.headers.stsSeconds=155520011
      - traefik.http.middlewares.nextcloud.headers.customFrameOptionsValue=SAMEORIGIN
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.permanent=true
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.regex=/.well-known/(card|cal)dav
      - traefik.http.middlewares.nextcloud_redirect.redirectregex.replacement=/remote.php/dav/


  db_postgres_nextcloud:
    image: postgres:12.5-alpine
    container_name: db_postgres_nextcloud
    volumes:
      - ./data/postgres_nextcloud:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=nextcloud
      - POSTGRES_DATABASE=nextcloud
      - POSTGRES_PASSWORD=$POSTGRES_PASSWORD

networks:
  default:
    ipam:
     config:
       - subnet: 10.0.0.0/24
         ip_range: 10.0.0.128/25
